"use strict";

/**
 * Lazy-load images script.
 *
 * @link https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/
 */
document.addEventListener('DOMContentLoaded', function () {
  var lazyImages = [].slice.call(document.querySelectorAll('img.lazy'));

  if ('IntersectionObserver' in window) {
    var lazyImageObserver = new IntersectionObserver(function (entries) {
      entries.forEach(function (entry) {
        if (entry.isIntersecting) {
          var lazyImage = entry.target;
          lazyImage.src = lazyImage.dataset.src;

          if (lazyImage.dataset.srcset) {
            lazyImage.srcset = lazyImage.dataset.srcset;
          }

          if (lazyImage.dataset.sizes) {
            lazyImage.sizes = lazyImage.dataset.sizes;
          }

          lazyImage.classList.remove('lazy');
          lazyImageObserver.unobserve(lazyImage);
        }
      });
    });
    lazyImages.forEach(function (lazyImage) {
      lazyImageObserver.observe(lazyImage);
    });
  } else {
    // For older browsers lacking IntersectionObserver support.
    // See https://developers.google.com/web/fundamentals/performance/lazy-loading-guidance/images-and-video/
    var active = false;

    var lazyLoad = function lazyLoad() {
      if (false === active) {
        active = true;
        setTimeout(function () {
          lazyImages.forEach(function (lazyImage) {
            if (lazyImage.getBoundingClientRect().top <= window.innerHeight && 0 <= lazyImage.getBoundingClientRect().bottom && 'none' !== getComputedStyle(lazyImage).display) {
              lazyImage.src = lazyImage.dataset.src;

              if (lazyImage.dataset.srcset) {
                lazyImage.srcset = lazyImage.dataset.srcset;
              }

              if (lazyImage.dataset.sizes) {
                lazyImage.sizes = lazyImage.dataset.sizes;
              }

              lazyImage.classList.remove('lazy');
              lazyImages = lazyImages.filter(function (image) {
                return image !== lazyImage;
              });

              if (0 === lazyImages.length) {
                document.removeEventListener('scroll', lazyLoad);
                window.removeEventListener('resize', lazyLoad);
                window.removeEventListener('orientationchange', lazyLoad);
              }
            }
          });
          active = false;
        }, 200);
      }
    };

    document.addEventListener('scroll', lazyLoad);
    window.addEventListener('resize', lazyLoad);
    window.addEventListener('orientationchange', lazyLoad);
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxhenlsb2FkLmpzIl0sIm5hbWVzIjpbImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImxhenlJbWFnZXMiLCJzbGljZSIsImNhbGwiLCJxdWVyeVNlbGVjdG9yQWxsIiwid2luZG93IiwibGF6eUltYWdlT2JzZXJ2ZXIiLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsImVudHJpZXMiLCJmb3JFYWNoIiwiZW50cnkiLCJpc0ludGVyc2VjdGluZyIsImxhenlJbWFnZSIsInRhcmdldCIsInNyYyIsImRhdGFzZXQiLCJzcmNzZXQiLCJzaXplcyIsImNsYXNzTGlzdCIsInJlbW92ZSIsInVub2JzZXJ2ZSIsIm9ic2VydmUiLCJhY3RpdmUiLCJsYXp5TG9hZCIsInNldFRpbWVvdXQiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJ0b3AiLCJpbm5lckhlaWdodCIsImJvdHRvbSIsImdldENvbXB1dGVkU3R5bGUiLCJkaXNwbGF5IiwiZmlsdGVyIiwiaW1hZ2UiLCJsZW5ndGgiLCJyZW1vdmVFdmVudExpc3RlbmVyIl0sIm1hcHBpbmdzIjoiOztBQUFBOzs7OztBQUtBQSxRQUFRLENBQUNDLGdCQUFULENBQTJCLGtCQUEzQixFQUErQyxZQUFXO0FBQ3pELE1BQUlDLFVBQVUsR0FBRyxHQUFHQyxLQUFILENBQVNDLElBQVQsQ0FBZUosUUFBUSxDQUFDSyxnQkFBVCxDQUEyQixVQUEzQixDQUFmLENBQWpCOztBQUVBLE1BQUssMEJBQTBCQyxNQUEvQixFQUF3QztBQUN2QyxRQUFNQyxpQkFBaUIsR0FBRyxJQUFJQyxvQkFBSixDQUEwQixVQUFVQyxPQUFWLEVBQW9CO0FBQ3ZFQSxNQUFBQSxPQUFPLENBQUNDLE9BQVIsQ0FBaUIsVUFBVUMsS0FBVixFQUFrQjtBQUNsQyxZQUFLQSxLQUFLLENBQUNDLGNBQVgsRUFBNEI7QUFDM0IsY0FBTUMsU0FBUyxHQUFHRixLQUFLLENBQUNHLE1BQXhCO0FBQ0FELFVBQUFBLFNBQVMsQ0FBQ0UsR0FBVixHQUFnQkYsU0FBUyxD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QUNMLGdCQUFQLENBQXlCLG1CQUF6QixFQUE4Q3VCLFFBQTlDO0FBQ0E7QUFDRCxDQWxFRCIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGF6eS1sb2FkIGltYWdlcyBzY3JpcHQuXG4gKlxuICogQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vd2ViL2Z1bmRhbWVudGFscy9wZXJmb3JtYW5jZS9sYXp5LWxvYWRpbmctZ3VpZGFuY2UvaW1hZ2VzLWFuZC12aWRlby9cbiAqL1xuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lciggJ0RPTUNvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbigpIHtcblx0bGV0IGxhenlJbWFnZXMgPSBbXS5zbGljZS5jYWxsKCBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCAnaW1nLmxhenknICkgKTtcblxuXHRpZiAoICdJbnRlcnNlY3Rpb25PYnNlcnZlcicgaW4gd2luZG93ICkge1xuXHRcdGNvbnN0IGxhenlJbWFnZU9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKCBmdW5jdGlvbiggZW50cmllcyApIHtcblx0XHRcdGVudHJpZXMuZm9yRWFjaCggZnVuY3Rpb24oIGVudHJ5ICkge1xuXHRcdFx0XHRpZiAoIGVudHJ5LmlzSW50ZXJzZWN0aW5nICkge1xuXHRcdFx0XHRcdGNvbnN0IGxhenlJbWFnZSA9IGVudHJ5LnRhcmdldDtcblx0XHRcdFx0XHRsYXp5SW1hZ2Uuc3JjID0gbGF6eUltYWdlLmRhdGFzZXQuc3JjO1xuXHRcdFx0XHRcdGlmICggbGF6eUltYWdlLmRhdGFzZXQuc3Jjc2V0ICkge1xuXHRcdFx0XHRcdFx0bGF6eUltYWdlLnNyY3NldCA9IGxhenlJbWFnZS5kYXRhc2V0LnNyY3NldDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBsYXp5SW1hZ2UuZGF0YXNldC5zaXplcyApIHtcblx0XHRcdFx0XHRcdGxhenlJbWFnZS5zaXplcyA9IGxhenlJbWFnZS5kYXRhc2V0LnNpemVzO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRsYXp5SW1hZ2UuY2xhc3NMaXN0LnJlbW92ZSggJ2xhenknICk7XG5cdFx0XHRcdFx0bGF6eUltYWdlT2JzZXJ2ZXIudW5vYnNlcnZlKCBsYXp5SW1hZ2UgKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH0gKTtcblxuXHRcdGxhenlJbWFnZXMuZm9yRWFjaCggZnVuY3Rpb24oIGxhenlJbWFnZSApIHtcblx0XHRcdGxhenlJbWFnZU9ic2VydmVyLm9ic2VydmUoIGxhenlJbWFnZSApO1xuXHRcdH0gKTtcblx0fSBlbHNlIHtcblx0XHQvLyBGb3Igb2xkZXIgYnJvd3NlcnMgbGFja2luZyBJbnRlcnNlY3Rpb25PYnNlcnZlciBzdXBwb3J0LlxuXHRcdC8vIFNlZSBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS93ZWIvZnVuZGFtZW50YWxzL3BlcmZvcm1hbmNlL2xhenktbG9hZGluZy1ndWlkYW5jZS9pbWFnZXMtYW5kLXZpZGVvL1xuXHRcdGxldCBhY3RpdmUgPSBmYWxzZTtcblxuXHRcdGNvbnN0IGxhenlMb2FkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIGZhbHNlID09PSBhY3RpdmUgKSB7XG5cdFx0XHRcdGFjdGl2ZSA9IHRydWU7XG5cblx0XHRcdFx0c2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0bGF6eUltYWdlcy5mb3JFYWNoKCBmdW5jdGlvbiggbGF6eUltYWdlICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoIGxhenlJbWFnZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgPD0gd2luZG93LmlubmVySGVpZ2h0ICYmIDAgPD0gbGF6eUltYWdlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLmJvdHRvbSApICYmICdub25lJyAhPT0gZ2V0Q29tcHV0ZWRTdHlsZSggbGF6eUltYWdlICkuZGlzcGxheSApIHtcblx0XHRcdFx0XHRcdFx0bGF6eUltYWdlLnNyYyA9IGxhenlJbWFnZS5kYXRhc2V0LnNyYztcblx0XHRcdFx0XHRcdFx0aWYgKCBsYXp5SW1hZ2UuZGF0YXNldC5zcmNzZXQgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bGF6eUltYWdlLnNyY3NldCA9IGxhenlJbWFnZS5kYXRhc2V0LnNyY3NldDtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRpZiAoIGxhenlJbWFnZS5kYXRhc2V0LnNpemVzICkge1xuXHRcdFx0XHRcdFx0XHRcdGxhenlJbWFnZS5zaXplcyA9IGxhenlJbWFnZS5kYXRhc2V0LnNpemVzO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdGxhenlJbWFnZS5jbGFzc0xpc3QucmVtb3ZlKCAnbGF6eScgKTtcblxuXHRcdFx0XHRcdFx0XHRsYXp5SW1hZ2VzID0gbGF6eUltYWdlcy5maWx0ZXIoIGZ1bmN0aW9uKCBpbWFnZSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gaW1hZ2UgIT09IGxhenlJbWFnZTtcblx0XHRcdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggMCA9PT0gbGF6eUltYWdlcy5sZW5ndGggKSB7XG5cdFx0XHRcdFx0XHRcdFx0ZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggJ3Njcm9sbCcsIGxhenlMb2FkICk7XG5cdFx0XHRcdFx0XHRcdFx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoICdyZXNpemUnLCBsYXp5TG9hZCApO1xuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCAnb3JpZW50YXRpb25jaGFuZ2UnLCBsYXp5TG9hZCApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSApO1xuXG5cdFx0XHRcdFx0YWN0aXZlID0gZmFsc2U7XG5cdFx0XHRcdH0sIDIwMCApO1xuXHRcdFx0fVxuXHRcdH07XG5cblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCAnc2Nyb2xsJywgbGF6eUxvYWQgKTtcblx0XHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggJ3Jlc2l6ZScsIGxhenlMb2FkICk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoICdvcmllbnRhdGlvbmNoYW5nZScsIGxhenlMb2FkICk7XG5cdH1cbn0gKTtcbiJdLCJmaWxlIjoibGF6eWxvYWQubWluLmpzIn0=